#!/usr/bin/env bash

export HISTSIZE='32768'
export HISTFILESIZE=$HISTSIZE
export HISTCONTROL='ignoredups'
export GIT_DUET_GLOBAL=true
export GIT_DUET_ROTATE_AUTHOR=1
export BOSH_USE_GEMFILE=1
export GEM_HOME=~/.gems

# rbenv
export PATH="$HOME/.rbenv/bin:$PATH:$HOME/.nvim/gobin:$GEM_HOME/bin"
[[ `which rbenv` ]] && eval "$(rbenv init -)"
[[ -e $HOME/.rbenv/completions/rbenv.bash ]] && source $HOME/.rbenv/completions/rbenv.bash

# Direnv
eval "$(direnv hook bash)"

# z (jump to directories)
source $HOME/.z.sh

# Show git status and bosh target in prompt
green="\[\033[01;32m\]"
blue="\[\033[01;34m\]"
cyan="\[\033[01;36m\]"
yellow="\e[1;33m"
no_color="\[\033[0m\]"

source $HOME/.git-prompt.sh
if type __git_ps1 > /dev/null 2>&1; then
    export PS1="${green}\h${no_color}:${blue}\w${no_color}${green}\$(__git_ps1 ' %s')${no_color} ${cyan}\$(__bosh_ps1)${no_color}${yellow}\$(__cf_ps1)${no_color}\n$ "
else
    export PS1="${green}\h${no_color}:${blue}\w${no_color}${cyan}\$(__bosh_ps1)${no_color}${yellow}\$(__cf_ps1)${no_color}\n$ "
fi

# Homebrew
export PATH="/usr/local/bin:/usr/local/sbin:$PATH"

# vmrun
export PATH="$PATH:/Applications/VMware Fusion.app//Contents/Library"

# Go
export GOPATH="$HOME/go"
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  export GOROOT="/usr/local/src/go"
  alias pbcopy="xclip -selection clipboard"
  alias pbpaste="xclip -out -selection clipboard"
fi
export PATH="$PATH:/usr/local/opt/go/libexec/bin:$GOROOT/bin"
export PATH="$GOPATH/bin:$PATH:$HOME/workspace/garden-windows-ci/bin"

# Homebrew gnu-tar: override defualt BSD tar
export MANPATH="/usr/local/Cellar/gnu-tar/1.29/share/man:$MANPATH"

# Hombrew Bash Completion
brew_cmd () {
	if hash brew 2> /dev/null; then
		brew "$@"
	else
		echo "Linux"
	fi
}
if [ -f $(brew_cmd --prefix)/etc/bash_completion ]; then
  . $(brew_cmd --prefix)/etc/bash_completion
fi

# Git tab completion (homebrew)
if [ -f `brew_cmd --prefix`/etc/bash_completion.d/git-completion.bash ]; then
    . `brew_cmd --prefix`/etc/bash_completion.d/git-completion.bash
fi

# AWS CLI Completion
complete -C aws_completer aws

if hash nvim 2> /dev/null; then
  export EDITOR=nvim
else
  export EDITOR=vim
fi

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
	colorflag="--color"
else # OS X `ls`
	colorflag="-G"
fi
alias l="ls -lhFA ${colorflag}"
alias ll="ls -lhFA ${colorflag}"
alias ls="command ls ${colorflag}"
alias grep='grep --color'
alias watch='watch '
alias hgrep='history | grep'
alias be="bundle exec"
alias tmux='_ssh_auth_save ; export HOSTNAME=$(hostname); export DISPLAY=":1"; tmux -2'
alias reload="exec $(which bash) -l"
alias vim='nvim'
alias gst="git status"
#use this if you need to run lpass from an ssh connection
alias lpass-ssh='LPASS_DISABLE_PINENTRY=1 lpass'
v () {
  if [[ $# -eq 0 ]] ; then
    nvim .
  else
    nvim $@
  fi
}
n () {
  if [[ $# -eq 0 ]] ; then
    nvim .
  else
    nvim $@
  fi
}
gv () {
  if [[ $# -eq 0 ]] ; then
    GOOS=windows nvim .
  else
    GOOS=windows nvim $@
  fi
}


# Load ssh key from lastpass
function load-key() {
  local NAME=$1
  local HOURS=$2
  local KEY_NOTE=$3

  if [ -z $HOURS ]; then
   CURRENT_HOUR=`date +%H | sed 's/^0//'`
   HOURS=`expr 18 - $CURRENT_HOUR`
   echo "Hours: $HOURS"
  fi

  if [ -z $KEY_NOTE ]; then
    KEY_NOTE=my-ssh-key
  fi

  if [[ `lpass status` != *"$NAME@pivotal.io"* ]]; then
    lpass login "$NAME@pivotal.io"
  fi

  lpass status 2>&1 > /dev/null
  if [[ $? -eq 0 ]]; then
    /usr/bin/ssh-add -D
    tmp_file=`mktemp`
    lpass show --notes $KEY_NOTE > $tmp_file
    /usr/bin/ssh-add -t ${HOURS}H $tmp_file
    rm $tmp_file
  fi
}
alias vkl='load-key'

# Download bosh logs
bl() {
  dir=$(mktemp -d)
  pushd $dir
    bosh -d $1 logs $2/0
    tar -xzvf *.tgz
    nvim .
  popd
}

rdp() {
  if [[ -z $1 ]] ; then
    IP='127.0.0.1'
  else
    IP=$1
  fi

  if [[ -z $2 ]] ; then
    PASSWORD='Password123!'
  else
    PASSWORD=$2
  fi

  if [[ -z $3 ]] ; then
    USERNAME='Administrator'
  else
    USERNAME=$3
  fi

  xfreerdp +nego +sec-rdp +sec-tls +sec-nla +fonts /dynamic-resolution /scale-desktop:150 /u:$USERNAME /p:$PASSWORD /v:$IP /scale:140 /size:1920x1080 +home-drive +clipboard
}

grdp() {
  project_name=$(_project_name $1)
  instance_name=$2
  user=${3:-admin}
  if [[ -z "$project_name" ]]; then
    echo "Unknown environment: $1"
    return
  fi
  zone=${ZONE:=us-east1-b}
  gcloud config set project $project_name
  gcloud config set compute/zone $zone
  local auth=$(gcloud -q beta compute reset-windows-password $instance_name --user $user --format=json)
  local ip=$(echo $auth | jq -r .ip_address)
  local username=$(echo $auth | jq -r .username)
  local password=$(echo $auth | jq -r .password)
  rdp $ip $password $username
}

# Set Pipelines
alias fly-hwc-exe="fly -t garden-windows sp -p hwc-exe -c $HOME/workspace/garden-windows-ci/pipelines/hwc-exe.yml -l<(lpass show --notes -G 'github-deploy-keys' 'github-access-tokens' 'aws-iam-access-keys' 'github-access-tokens')"
alias fly-filelock="fly -t garden-windows sp -p filelock -c $HOME/workspace/garden-windows-ci/pipelines/filelock.yml"
alias fly-tar="fly -t garden-windows sp -p tar -c $HOME/workspace/garden-windows-ci/pipelines/tar.yml -l<(lpass show --notes -G github-deploy-keys pesto-secrets github-access-tokens aws-iam-access-keys github-access-tokens tracker-api-token)"

fly-envoy() {
  fly -t garden-windows sp \
    -p envoy \
    -c "$HOME/workspace/garden-windows-ci/pipelines/envoy.yml" \
    -l <(lpass show --notes 'aws-iam-access-keys' 'github-deploy-keys-3' 'github-access-tokens')
}

fly-cleanup() {
  fly -t garden-windows sp \
    -p cleanup \
    -c $HOME/workspace/garden-windows-ci/pipelines/cleanup.yml \
    -l <(_bosh_creds_yml alfredo) \
    -l <(_bosh_creds_yml hummus) \
    -l <(_bosh_creds_yml pesto) \
    -l <(_bosh_creds_yml spitfire) \
    -l <(_bosh_creds_yml tartar) \
    -l <(_bosh_creds_yml tzatziki) \
    -l <(_bosh_creds_yml guac) \
    -l <(_bosh_creds_yml mulgore) \
    -l <(lpass show --notes 'github-deploy-keys' )
}

fly-garden-windows() {
  fly -t garden-windows sp \
    -p garden-windows \
    -c $HOME/workspace/garden-windows-ci/pipelines/garden-windows.yml \
    -l <(_env_creds_yml alfredo) \
    -l <(lpass show --notes -G 'github-deploy-keys' 'github-access-tokens' 'aws-iam-access-keys' 'github-access-tokens' 'alfredo-service-account.json' )
}

fly-winc () {
  fly -t garden-windows sp -p winc -c $HOME/workspace/garden-windows-ci/pipelines/winc.yml \
    -l <(_env_creds_yml pesto) \
  -l<(lpass show --notes github-deploy-keys github-deploy-keys-2 github-deploy-keys-3 aws-iam-access-keys github-access-tokens pesto-service-account.json)
}

fly-winc-2019 () {
  fly -t garden-windows sp -p winc-2019 -c $HOME/workspace/garden-windows-ci/pipelines/winc-2019.yml \
    -l<(lpass show --notes github-deploy-keys-2) \
    -l $HOME/workspace/garden-windows-ci/vars/winc-2019.yml
}

fly-longrunning () {
  fly -t garden-windows sp -p longrunning -c $HOME/workspace/garden-windows-ci/pipelines/longrunning.yml \
    -l <(_env_creds_yml mulgore) \
  -l<(lpass show --notes github-deploy-keys aws-iam-access-keys github-access-tokens spitfire-service-account.json datadog-secrets)
}

fly-windows1709fs () {
  fly -t garden-windows sp -p windows1709fs -c $HOME/workspace/garden-windows-ci/pipelines/windowsfs.yml \
    -l <(_env_creds_yml tartar) \
  -l<(lpass show --notes aws-iam-access-keys docker-creds github-deploy-keys github-deploy-keys-2 github-access-tokens tartar-service-account.json tracker-api-token) \
  -l $HOME/workspace/garden-windows-ci/vars/windows1709fs.yml
}

fly-windows1803fs () {
  fly -t garden-windows sp -p windows1803fs -c $HOME/workspace/garden-windows-ci/pipelines/windowsfs.yml \
    -l <(_env_creds_yml tartar) \
  -l<(lpass show --notes aws-iam-access-keys docker-creds github-deploy-keys github-deploy-keys-2 github-access-tokens tartar-service-account.json tracker-api-token) \
  -l $HOME/workspace/garden-windows-ci/vars/windows1803fs.yml
}

fly-docker () {
  fly -t garden-windows sp -p docker -c $HOME/workspace/garden-windows-ci/pipelines/docker.yml \
  -l<(lpass show --notes docker-creds)
}

ci-failure () {
  if [[ -z "$1" ]]; then
      echo "error: expected at least one argument to ci-failure"
      echo "usage: ci-failure <pipeline[/job]>"
      return
  fi
  arg="$1"

  pipeline=0
  job=0
  if [[ "$arg" = *"/"* ]]; then
    job=1
    flyargs="-j $arg"
  else
    pipeline=1
    flyargs="-p $arg"
  fi

  index=0
  if [[ ! -z "$2" ]]; then
      index=$2
  fi
  line=$(($index + 1))

  dir=`mktemp -d`
  file="log.txt"
  pushd $dir > /dev/null
    builds="$(fly -t garden-windows builds -c 100 $flyargs | awk '/failed/')"
    if [[ $pipeline -eq 1 ]]; then
      echo "$builds"
    else
      echo "$builds" \
	| awk "FNR == $line {print \$3}" \
	| xargs -I {} fly -t garden-windows watch $flyargs -b {} \
	| sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" \
	> $file
      nvim $file
      rm -rf $dir
    fi
  popd > /dev/null
}

fix-mic-volume () {
  PIDFILE="/tmp/fix-mic-volume.pid"
  PID=$(cat ${PIDFILE} 2>/dev/null)

  if [[ -n "${PID}" && -e /proc/${PID}/exe ]]; then
    echo already running
  else
    echo starting volume watcher the background

    # background loop whose pid is recorded in PID
    while sleep 0.3; do
      # set mic-boost to zer0
      # this seems to be what zoom adjusts automatically when there's silence
      amixer -q sset "Front Mic Boost" 0;
    done &

    echo $! > ${PIDFILE}
  fi
}

vnc-mirror () {
  export DISPLAY=:0
  echo -n Desired vnc password: 
  read -s password
  echo

  dbus-launch gsettings set org.gnome.Vino enabled true
  dbus-launch gsettings set org.gnome.Vino require-encryption false
  dbus-launch gsettings set org.gnome.Vino prompt-enabled false
  dbus-launch gsettings set org.gnome.Vino authentication-methods "['vnc']"
  dbus-launch gsettings set org.gnome.Vino vnc-password $(echo -n "$password"|base64)

  if ! pgrep -f vino-server; then
    nohup /usr/lib/vino/vino-server --sm-disable >/dev/null &
  fi
}

source $HOME/workspace/garden-windows-ci/bin/bash_helpers
alias bt="bosh_target"
alias ct="cf_target"

__bosh_ps1() {
  if [[ "$BOSH_ENVIRONMENT" = "dev-box" ]]; then
    echo "[$BOSH_ENVIRONMENT] "
  elif [[ -n "$BOSH_ENVIRONMENT" && -n "$BOSH_TARGET_NAME" && -n "$BOSH_ALL_PROXY" ]]; then
    echo "[$BOSH_TARGET_NAME] "
  fi
}

__cf_ps1() {
  local env_name=$(jq -r .Target $HOME/.cf/config.json 2>/dev/null | sed 's/.*api\.\(.*\)\.cf-app.*/\1/')
  if [[ -n "$env_name" ]]; then
    echo "[$env_name]"
  fi
}

set_bosh_windows_s3_blobstore() {
  note="aws-iam-access-keys"
  export AWS_ACCESS_KEY_ID=$(bosh int --path /BOSH_WINDOWS_S3_ADMIN_ACCESS_KEY_ID <(lpass show --notes $note))
  export AWS_SECRET_ACCESS_KEY=$(bosh int --path /BOSH_WINDOWS_S3_ADMIN_SECRET_ACCESS_KEY <(lpass show --notes $note))
  private_yml='---
blobstore:
  provider: s3
  options:
    credentials_source: env_or_profile'
  echo "$private_yml" > config/private.yml
}

_ssh_auth_save() {
    ln -sf "$SSH_AUTH_SOCK" "$HOME/.ssh/ssh-auth-sock.$HOSTNAME"
}

cp_lpass() {
  lpass show --password -G "$1" | pbcopy
}

ls_lpass() {
  lpass show -G "$1"
}

box_deploy() {
  local name=$1
  local recreate=$2
  bosh_target "dev-box"
  bosh -d $name deploy <(bosh int ~/workspace/garden-windows-ci/dev-box/$name.yml -l <(lpass show --notes dev-box-secrets.yml)) $recreate
}

box_ip() {
  local name=$1
  bosh_target "dev-box"
  local vm_ip=$(bosh vms | grep $name | awk '{print $4}')
  echo $vm_ip
}

box_ssh() {
  local name=$1
  local tmpfile=$(mktemp /tmp/dev-box-ssh.XXXXXX)
  echo "$(bosh int <(lpass show --notes 'dev-box-secrets.yml') --path /DEV_BOX_PRIVATE_KEY)" > $tmpfile
  chmod 600 $tmpfile
  local vm_ip="$(box_ip $name)"
  ssh -i $tmpfile -p 2222 "Administrator@$vm_ip"
  rm $tmpfile
}

box_rdp() {
  local name=$1
  local vm_ip="$(box_ip $name)"
  rdp $vm_ip
}

box_mount_smb() {
  local name=$1
  local vm_ip="$(box_ip $name)"
  local mount_dir="/home/pivotal/workspace/vmfiles/vmshare/$name"

  sudo umount $mount_dir
  mkdir -p $mount_dir
  sudo mount -t cifs -o "vers=3.0,user=Administrator,password=Password123!,uid=pivotal,gid=pivotal" \
      "//$vm_ip/workspace" \
      $mount_dir
}

function box_upload_stemcell() {
  "${HOME}/workspace/garden-windows-ci/scripts/box_upload_stemcell.sh" "$@"
}

del_line() {
  sed -i "$1d" $2
}

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/ash/google-cloud-sdk/path.bash.inc' ]; then source '/Users/ash/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/ash/google-cloud-sdk/completion.bash.inc' ]; then source '/Users/ash/google-cloud-sdk/completion.bash.inc'; fi
