#!/usr/bin/env bash

# When adding/deleting envs, put them in the right list here
GITHUB_ENVS_CF="aioli,alfredo,hummus,sriracha,pesto"
CONCOURSE_ENV="spitfire"
GITHUB_ENVS="$CONCOURSE_ENV,$GITHUB_ENVS_PCF"

# Bosh and CF target functions
bosh_target() {
  [ "$1" == "-h" ] && echo "Tell bosh cli to target a named bosh env" && return
  local environment=$1

  # comma seperated list of environments that run in our pipelines
  local pipeline_envs="pesto,alfredo,aioli,sriracha"
  if [[  ",$pipeline_envs," =~ .*\,$environment,.* ]]; then
    read -p "This director runs in a pipeline. Are you sure you want to target it? (yn) " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      echo "exiting"
      return
    fi
  fi

  if [ "${CONCOURSE_ENV}" = "${environment}" ]; then
    echo "You are targeting the Concourse Director, try not to break anything :)"
  fi

  _unset_prefix BOSH_
  if [ "$environment" = "dev-box" ]; then
    export BOSH_ENVIRONMENT="dev-box"
    return
  fi

  if [[ -z "$(gcloud config list --format='value(core.account)')" ]]; then
    echo 'Must log in using `gcloud auth login`'
    return
  fi

  if [[ -z "$(_project_name $environment)" ]]; then
    echo "Unknown environment: $environment"
    return
  fi

  if [[ ",$GITHUB_ENVS," =~ .*\,$environment,.* ]]; then
    _bosh_creds_github $environment
    if [ $? -ne 0 ]; then
      echo "_bosh_creds_github failed"
      return
    fi
  else
    eval "$(_bosh_creds_gcp $environment true)"
  fi
}

cf_target() {
  [ "$1" == "-h" ] && echo "Tell cf cli to target a named cf endpoint" && return
  local environment=$1

  if [[ -z "$(gcloud config list --format='value(core.account)')" ]]; then
    echo 'Must log in using `gcloud auth login`'
    return
  fi

  project_name=$(_project_name $environment)
  if [[ -z "$project_name" ]]; then
    echo "Unknown environment: $environment"
    return
  fi

  if [[ ",$GITHUB_ENVS," =~ .*\,$environment,.* ]]; then
    _cf_creds_github $environment
  else
    if cfcreds_output=$(_cf_creds $environment); then
      eval "$cfcreds_output"
    else
      echo "$cfcreds_output"
      echo Getting cf creds failed for $environment
      return 1
    fi
  fi

  cf login --skip-ssl-validation \
    -a https://api.$environment.cf-app.com \
    -u admin \
    -p $ADMIN_PASSWORD
}

buildpacks_cf_target() {
  [ "$1" == "-h" ] && echo "Whatever - this is probably obsolete" && return
  local environment=$1
  local envs_dir=$(mktemp -d)

  ## shallow clone to tempdir
  git clone --depth=1 git@github.com:cloudfoundry/buildpacks-envs.git $envs_dir
  vars_file=$envs_dir/$environment/vars-store.yml

  # do minimal check and cleanup if failed
  if [ ! -f $vars_file ]; then
    echo failed to clone vars file: $vars_file
    rm -rf $envs_dir # cleanup

    return
  fi

  # do minimal read and cleanup immediately
  vars_file_content=$(cat $vars_file)
  rm -rf $envs_dir #cleanup

  local admin_password=$(bosh int --path /cf_admin_password <(echo "$vars_file_content"))

  cf login --skip-ssl-validation \
    -a https://api.$environment.buildpacks-gcp.ci.cf-app.com \
    -u admin \
    -p $admin_password \
    -o garden-windows \
    -s garden-windows \
    ;
}

# Helper functions
_env_creds_yml() {
  _bosh_creds_yml $1
  _cf_creds_yml $1
}

_get_jumpbox_creds() {
  bbl_state_dir=$1
  local uppercase_environment=$(echo $2 | awk '{print toupper($0)}')

  local jumpbox_ip="$(bbl --state-dir=$bbl_state_dir jumpbox-address 2>&1)"
  if [[ $? -ne 0 ]]; then
    echo "echo \"Failed to get jumpbox address: $jumpbox_ip\""
    return
  fi

  local jumpbox_ssh_key="$(bbl --state-dir=$bbl_state_dir ssh-key)"
  if [[ $? -ne 0 ]]; then
    echo "echo \"Failed to get jumpbox ssh key: $jumpbox_ssh_key\""
    return
  fi

  echo "${uppercase_environment}_JUMPBOX_URL: $jumpbox_ip:22"
  echo "${uppercase_environment}_JUMPBOX_IP: $jumpbox_ip"

  local formatted_key=$(echo "$jumpbox_ssh_key" | sed 's/^/  /')
  echo -e "${uppercase_environment}_JUMPBOX_SSH_KEY: |\n$formatted_key"
}

_bosh_creds_yml() {
  local environment=$1
  local uppercase_environment=$(echo $environment | awk '{print toupper($0)}')

  project_name=$(_project_name $environment)
  if [[ -z "$project_name" ]]; then
    echo "Unknown environment: $environment"
    return
  fi

  if [[ ",$GITHUB_ENVS," =~ .*\,$environment,.* ]]; then
    _bosh_creds_github $environment true
    if [ $? -ne 0 ]; then
      echo "_bosh_creds_github failed"
      return
    fi
  else
    # TODO: remove this when every environment uses the github repo for its creds
    eval "$(_bosh_creds_gcp $environment true)"

    if gsutil ls gs://$project_name/bbl-state.json > /dev/null 2>&1; then
      local bbl_state_dir=$(mktemp -d)
      gsutil cp gs://$project_name/bbl-state.json $bbl_state_dir >/dev/null 2>&1
      gsutil cp -r gs://$project_name/vars $bbl_state_dir >/dev/null 2>&1
      _get_jumpbox_creds $bbl_state_dir $environment
      rm -rf $bbl_state_dir
    fi
  fi

  echo "${uppercase_environment}_BOSH_CLIENT: $BOSH_CLIENT"
  echo "${uppercase_environment}_BOSH_CLIENT_SECRET: $BOSH_CLIENT_SECRET"
  echo "${uppercase_environment}_BOSH_ENVIRONMENT: $BOSH_ENVIRONMENT"

  local formatted_cert=$(echo "$BOSH_CA_CERT" | sed 's/^/  /')
  echo -e "${uppercase_environment}_BOSH_CA_CERT: |\n$formatted_cert"
}

_cf_creds_yml() {
  local environment=$1
  local uppercase_environment=$(echo "$environment" | awk '{print toupper($0)}')

  if [[ ",$GITHUB_ENVS," =~ .*\,$environment,.* ]]; then
    _cf_creds_github $environment
  else
    eval "$(_cf_creds $environment)"
  fi

  echo "${uppercase_environment}_ADMIN_PASSWORD: $ADMIN_PASSWORD"
}

_bosh_creds_github() {
  local environment=$1
  local print_jumpbox_creds=$2

  local envs="/tmp/garden-windows-environments"

  if [ -d "${envs}" ]; then
    # Ensure we have the latest version of the environments repo.
    rm -rf "${envs}"
  fi

  mkdir -p "${envs}" &> /dev/null
  git clone git@github.com:pivotal/garden-windows-environments.git ${envs} &> /dev/null
  if [ $? -ne 0 ]; then
    echo "'git clone git@github.com:pivotal/garden-windows-environments.git' failed; make sure to run 'load-key'"
    return 1
  fi

  pushd "${envs}/${environment}" &> /dev/null
    if [[ ",$GITHUB_ENVS_PCF," =~ .*\,$environment,.* ]]; then
      if [ ! -f env ] || [ ! -f ops_manager_target ] || [ ! -f ops_manager.key ]; then
        echo "Environment files missing: Needs env, ops_manager_target, ops_manager.key files"
        popd &> /dev/null
        return 1
      fi

      tmp_file=$(mktemp)
      cat ops_manager.key > $tmp_file
      ops_manager_target=$(cat ops_manager_target)
      export BOSH_ALL_PROXY="ssh+socks5://${ops_manager_target}?private-key=${tmp_file}"
      export CREDHUB_PROXY=$BOSH_ALL_PROXY
      export JUMPBOX_PRIVATE_KEY=$tmp_file
      eval "$(cat env)"

    # Open-source
    else
      eval "$(bbl print-env)"
      if test $print_jumpbox_creds; then
        _get_jumpbox_creds "${envs}/${environment}" $environment
      fi
    fi
  popd &> /dev/null

  rm -rf "${envs}"

  export BOSH_TARGET_NAME="${environment}"
}

_bosh_creds_gcp() {
  local environment=$1
  local project_name=$(_project_name $environment)
  if [[ -z "$project_name" ]]; then
    echo "Unknown environment: $environment"
    return
  fi

  if gsutil ls gs://$project_name/bbl-state.json > /dev/null 2>&1; then
    local bbl_state_dir=$(mktemp -d)
    gsutil cp gs://$project_name/bbl-state.json $bbl_state_dir >/dev/null 2>&1
    gsutil cp -r gs://$project_name/vars $bbl_state_dir >/dev/null 2>&1

    local bbl_env
    bbl_env="$(bbl --state-dir=$bbl_state_dir print-env 2>&1)"
    local bbl_exit_status=$?

    local bosh_environment="$(bbl --state-dir=$bbl_state_dir env-id)"
    local bosh_exit_status=$?

    rm -r $bbl_state_dir
    if [[ $bbl_exit_status -ne 0 || $bosh_exit_status -ne 0 ]]; then
      echo "echo \"Failed to print bbl env: $bbl_env, env-id: $bosh_environment\""
      return
    fi
    echo "export BOSH_TARGET_NAME=$bosh_environment"
    echo "$bbl_env >/dev/null 2>&1"
  else
    echo "echo \"bbl-state.json missing for $project_name\""
  fi

  if [[ -n "$BOSH_ALL_PROXY" ]]; then
    pkill -f "\-D ${BOSH_ALL_PROXY##*:} jumpbox"
    unset BOSH_ALL_PROXY
  fi
}

_cf_creds() {
  local environment=$1
  local project_name=$(_project_name $environment)

  if [[ -z "$project_name" ]]; then
    echo "Unknown environment: $environment"
    return
  fi

  if [ -z "$(gsutil stat gs://$project_name/cf/creds.yml 2> /dev/null)" ]; then
    echo "gs://$project_name/cf/creds.yml does not exist. Exiting"
    return 1
  fi

  local credhub_secret=$(bosh int --path /credhub_admin_client_secret <(gsutil cat gs://$project_name/cf/creds.yml))
  echo "export CREDHUB_SECRET=$credhub_secret"

  local admin_password=$(bosh int --path /cf_admin_password <(gsutil cat gs://$project_name/cf/vars.yml))
  echo "export ADMIN_PASSWORD=$admin_password"
}

_cf_creds_github() {
  local environment=$1

  local envs="/tmp/garden-windows-environments"
  mkdir -p "${envs}" &> /dev/null

  git clone git@github.com:pivotal/garden-windows-environments.git ${envs} &> /dev/null

  pushd "${envs}/${environment}" &> /dev/null
    # export CREDHUB_SECRET=$(credhub get -n /bosh-$environment/cf/credhub_admin_client_secret -j | jq -r .value)
    export ADMIN_PASSWORD=$(bosh int --path /cf_admin_password cf/vars.yml)
  popd &> /dev/null

  rm -rf "${envs}"

  export CF_TARGET_NAME="${environment}"
}

_project_name() {
  case "$1" in
    spitfire)
      echo "cf-greenhouse-$1"
      ;;
    pesto | alfredo | aioli | sriracha | hummus | sys.merced)
      echo "$1"
      ;;
    edge.buildpacks-gcp.ci)
      # Bucket inside spitfire project
      echo "cf-buildpacks-edge"
      ;;
  esac
}

_unset_prefix() {
  local prefix=$1
  unset $(printenv |grep $prefix |awk 'BEGIN{FS="=";}{print $1;}')
}

