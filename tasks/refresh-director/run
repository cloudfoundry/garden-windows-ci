#!/usr/bin/env bash

# 1. Check lock
# 2. If already locked exit
# 3. else acquire lock
# 4. bbl destroy
# 5. run bbl up script
# 6. release lock
set -eu

setup_github_ssh() {
  mkdir -p ~/.ssh

  private_key=${private_key// //\n}
  private_key=${private_key//\/nRSA\/nPRIVATE\/n/ RSA PRIVATE }
  private_key_path=~/.ssh/id_rsa

  echo "$private_key" > $private_key_path
  chmod 600 $private_key_path

  eval $(ssh-agent) >/dev/null
  ssh-add $private_key_path >/dev/null
  ssh-keyscan github.com >> ~/.ssh/known_hosts

}

release_lock() {
  if [ -f ci-lock/$env/unclaimed/$env ]; then
    echo "$env is already unclaimed. Exiting"
    return 0
  fi

  pushd ci-lock
    git checkout master
    git mv $env/claimed/$env $env/unclaimed/$env
    git -c user.name="Garden Windows CI" -c user.email="<>" commit --author "environments-pipeline <>" -m "environments/bbl-update-$env unclaiming: $env"
    git push origin master
  popd
  echo Released $env
}

get_lock() {

  pushd ci-lock
    git checkout master
    git mv $env/unclaimed/$env $env/claimed/$env
    git -c user.name="Garden Windows CI" -c user.email="<>" commit --author "environments-pipeline <>" -m "environments/bbl-update-$env claiming: $env"
    git push origin master
  popd
  echo Claimed $env
}

env_available() {
  if [ -f ci-lock/$env/claimed/$env ]; then
    echo "$env is claimed."
    false
  fi
  echo "$env is unclaimed."
  true
}

if ! env_available ; then
  Exit 0
fi

setup_github_ssh
get_lock
release_lock
bbl_exe=binary-dir/bbl_executable


